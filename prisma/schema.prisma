// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum StackType {
  LANGUAGE
  FRAMEWORK
  DATABASE
  PLATFORM
  LIBRARY
  OTHER
}

enum ProjectType {
  ANDROID
  WEB
  IOS
  DESKTOP
  IOT
  OTHER
}


model User {
  id        Int   @id @default(autoincrement())
  uid       String   @unique @default(uuid())
  name      String
  email    String   @unique
  password String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([email])
  @@index([uid])
}

model Article {
  id        Int   @id @default(autoincrement())
  uid       String   @unique @default(uuid())
  slug      String   @unique
  image     String
  title     String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([uid])
  @@index([slug])
}

model Project {
  id        Int   @id @default(autoincrement())
  uid       String   @unique @default(uuid())
  slug      String   @unique
  name      String
  url       String
  description String @db.Text
  type      ProjectType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([uid])
  @@index([slug])

  stacks ProjectStack[]
  images ProjectImage[]
}


model Stack {
  id        Int   @id @default(autoincrement())
  uid       String    @unique @default(uuid())
  name      String    @unique
  image     String
  type      StackType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([uid])
  projects ProjectStack[]
}

model ProjectStack {
  id        Int   @id @default(autoincrement())
  uid       String   @unique @default(uuid())
  
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId Int
  stack     Stack    @relation(fields: [stackId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  stackId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([uid])
  @@index([projectId])
  @@index([stackId])
}

model ProjectImage {
  id        Int      @id @default(autoincrement())
  uid       String   @unique @default(uuid())
  projectId Int
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([uid])
  @@index([projectId])
}